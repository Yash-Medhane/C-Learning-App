
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Types of Files in C</title>
    <link rel="stylesheet" href="style/lesson1.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<body>
    <div class="slider">
        
 <div class="slide active">
            <img src="assets/lg.jpg" alt="">
            <div class="info">
                <h1>Text Files</h1>
        <p>A text file in C is a simple file that contains textual data. Text files can be easily read and modified using standard text editors. Each line in a text file typically represents a separate piece of information.</p>
        <p>Here's an example of creating and writing to a text file:</p>
        <pre><code>// Creating a text file
FILE *textFile = fopen("example.txt", "w");
if (textFile != NULL) {
    fprintf(textFile, "This is a text file.\n");
    fprintf(textFile, "It contains some text data.\n");
    fclose(textFile);
}</code></pre>
            </div>

        </div>

        <div class="slide">
            <img src="assets/or.jpg" alt="">
            <div class="info">
                <h1>Binary Files</h1>
        <p>A binary file in C stores data in a binary format, which means the data is represented in a form that computers can directly interpret. Binary files are often used to store complex data structures or data that needs to be read quickly without any parsing.</p>
        <p>Here's an example of creating and writing to a binary file:</p>
        <pre><code>// Creating a binary file
FILE *binaryFile = fopen("data.bin", "wb");
if (binaryFile != NULL) {
    int data[] = {1, 2, 3, 4, 5};
    fwrite(data, sizeof(int), sizeof(data) / sizeof(int), binaryFile);
    fclose(binaryFile);
}</code></pre></section>

    <section class="content">
        <p><strong>Understanding the differences between text files and binary files is essential for handling different types of data efficiently in C programming.</strong></p>
            </div>
        </div>

        
        <div class="navigation">
            <i class="fas fa-chevron-left prev-btn"></i>
            <i class="fas fa-chevron-right next-btn"></i>
        </div>
        <div class="navigation-visibility">
            <div class="slide-icon active"></div>
            <div class="slide-icon"></div>

        </div>
    </div>

    <div class="play-button">
        <button onclick="window.location.href='unit5'">Play</button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const nextBtn = document.querySelector(".next-btn");
            const prevBtn = document.querySelector(".prev-btn");
            const slides = document.querySelectorAll(".slide");
            const slideIcons = document.querySelectorAll(".slide-icon");
            let slideNumber = 0;

            const showSlide = (n) => {
                slides.forEach((slide) => {
                    slide.classList.remove("active");
                });
                slideIcons.forEach((icon) => {
                    icon.classList.remove("active");
                });

                if (n < 0) {
                    slideNumber = slides.length - 1;
                } else if (n >= slides.length) {
                    slideNumber = 0;
                } else {
                    slideNumber = n;
                }

                slides[slideNumber].classList.add("active");
                slideIcons[slideNumber].classList.add("active");
            };

            nextBtn.addEventListener("click", () => {
                showSlide(slideNumber + 1);
            });

            prevBtn.addEventListener("click", () => {
                showSlide(slideNumber - 1);
            });
        });
    </script>

</body>

</html>