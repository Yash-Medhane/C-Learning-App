
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Break Statement</title>
    <link rel="stylesheet" href="style/lesson1.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<body>
    <div class="slider">
        <div class="slide active">
            <img src="assets/bp.jpg" alt="">
            <div class="info cssanimation leFadeInLeft sequence">
                <h1>The Break Statement</h1>
        <p>The <code>break</code> statement is used to exit a loop prematurely. When encountered inside a loop, it immediately terminates the loop's execution, regardless of the loop's condition.</p>
        <pre><code>for (int i = 1; i <= 10; i++) {
    if (i == 5) {
        break;
    }
    printf("%d ", i);
}</code></pre>
        <p>In this example, the loop prints numbers from 1 to 4. When <code>i</code> becomes 5, the <code>break</code> statement is executed, and the loop terminates.</p>
                   
            </div>
        </div>


        <div class="slide">
            <img src="assets/lg.jpg" alt="">
            <div class="info">
                <h1>The Continue Statement</h1>
                <p>The <code>continue</code> statement is used to skip the rest of the loop's body for the current iteration and proceed to the next iteration of the loop.</p>
                <pre><code>for (int i = 1; i <= 5; i++) {
            if (i % 2 == 0) {
                continue;
            }
            printf("%d ", i);
        }</code></pre>
                <p>In this example, the loop prints only the odd numbers from 1 to 5. When <code>i</code> is even, the <code>continue</code> statement skips the rest of the loop body, and the next iteration begins.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/or.jpg" alt="">
            <div class="info">
                <h1>The Goto Statement</h1>
        <p>The <code>goto</code> statement is used to transfer control unconditionally to a labeled statement in the same function. It is often considered harmful and should be used sparingly due to its potential to make code difficult to understand and maintain.</p>
        <pre><code>int num = 1;
repeat:
    printf("%d ", num);
    num++;
    if (num <= 5) {
        goto repeat;
    }</code></pre>
        <p>In this example, the program repeatedly prints numbers from 1 to 5 using a <code>goto</code> statement to jump back to the <code>repeat</code> label until <code>num</code> becomes greater than 5.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/3.jpg" alt="">
            <div class="info">
                <p><strong>Break, continue, and goto statements provide ways to control the flow of your program, but they should be used judiciously to maintain code clarity and readability.</strong></p>
            </div>

        </div>

       

        <div class="navigation">
            <i class="fas fa-chevron-left prev-btn"></i>
            <i class="fas fa-chevron-right next-btn"></i>
        </div>
        <div class="navigation-visibility">
            <div class="slide-icon active"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
          
        </div>
    </div>
    <div class="play-button">
        <button onclick="window.location.href='unit2'">Play</button>
      </div>
      
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const nextBtn = document.querySelector(".next-btn");
            const prevBtn = document.querySelector(".prev-btn");
            const slides = document.querySelectorAll(".slide");
            const slideIcons = document.querySelectorAll(".slide-icon");
            let slideNumber = 0;

            const showSlide = (n) => {
                slides.forEach((slide) => {
                    slide.classList.remove("active");
                });
                slideIcons.forEach((icon) => {
                    icon.classList.remove("active");
                });

                if (n < 0) {
                    slideNumber = slides.length - 1;
                } else if (n >= slides.length) {
                    slideNumber = 0;
                } else {
                    slideNumber = n;
                }

                slides[slideNumber].classList.add("active");
                slideIcons[slideNumber].classList.add("active");
            };

            nextBtn.addEventListener("click", () => {
                showSlide(slideNumber + 1);
            });

            prevBtn.addEventListener("click", () => {
                showSlide(slideNumber - 1);
            });
        });
    </script>

</body>

</html>