
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loop Control Statements in C</title>
    <link rel="stylesheet" href="style/lesson1.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<body>
    <div class="slider">

        <div class="slide active">
            <img src="assets/lg.jpg" alt="">
            <div class="info">
                <h1>For Loop</h1>
        <p>The <code>for</code> loop is used for iterating over a range of values or executing a block of code a specific number of times.</p>
        <pre><code>for (initialization; condition; increment/decrement) {
    // Code to be executed
}</code></pre>
        <p>The loop begins with the <code>initialization</code> step, where the loop variable is initialized. The <code>condition</code> is checked before each iteration, and if true, the loop body is executed. After each iteration, the <code>increment/decrement</code> step is performed.</p>
        <p><strong>Example:</strong></p>
        <pre><code>for (int i = 1; i <= 5; i++) {
    printf("%d ", i);
}</code></pre>
        <p>This loop prints numbers from 1 to 5.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/or.jpg" alt="">
            <div class="info">
                <h1>While Loop</h1>
        <p>The <code>while</code> loop repeats a block of code as long as a specified condition is true.</p>
        <pre><code>while (condition) {
    // Code to be executed
}</code></pre>
        <p>The loop continues as long as the <code>condition</code> evaluates to true.</p>
        <p><strong>Example:</strong></p>
        <pre><code>int i = 1;
while (i <= 5) {
    printf("%d ", i);
    i++;
}</code></pre>
        <p>This loop also prints numbers from 1 to 5.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/1.jpg" alt="">
            <div class="info">
                <h1>Do-While Loop</h1>
        <p>The <code>do-while</code> loop is similar to the <code>while</code> loop, but it always executes the block of code at least once, even if the condition is false.</p>
        <pre><code>do {
    // Code to be executed
} while (condition);</code></pre>
        <p>The loop first executes the code block and then checks the condition. If the condition is true, the loop continues; otherwise, it exits.</p>
        <p><strong>Example:</strong></p>
        <pre><code>int i = 1;
do {
    printf("%d ", i);
    i++;
} while (i <= 5);</code></pre>
        <p>This loop also prints numbers from 1 to 5.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/2.jpg" alt="">
            <div class="info">
                <h1>Loop Control and Flow</h1>
        <p>Loop control statements like <code>break</code> and <code>continue</code> alter the normal flow of a loop.</p>
        <ul>
            <li><strong>break:</strong> Terminates the loop and transfers control to the statement immediately following the loop.</li>
            <li><strong>continue:</strong> Skips the current iteration of the loop and proceeds to the next iteration.</li>
        </ul>
        <p>These statements provide flexibility in controlling the execution flow within loops.</p>
            </div>
        </div>

        <div class="slide">
            <img src="assets/3.jpg" alt="">
            <div class="info">
                <h1>Choosing the Right Loop</h1>
                <p>Choosing the appropriate loop depends on the specific requirements of the task at hand.</p>
                <ul>
                    <li><strong>For Loop:</strong> Used when the number of iterations is known beforehand.</li>
                    <li><strong>While Loop:</strong> Used when the condition for termination is known before the loop starts.</li>
                    <li><strong>Do-While Loop:</strong> Used when the loop body must execute at least once, regardless of the condition.</li>
                </ul>
                <p>Understanding the differences between these loops helps in writing efficient and readable code.</p>
            </div>
        </div>

        <div class="slide">
            <img src="assets/bp.jpg" alt="">
            <div class="info">
                <p><strong>Loop control statements are essential for implementing repetitive tasks in C programming. Mastering various loop types and their control mechanisms is key to writing efficient and maintainable code.</strong></p>
            </div>
        </div>

        <div class="navigation">
            <i class="fas fa-chevron-left prev-btn"></i>
            <i class="fas fa-chevron-right next-btn"></i>
        </div>
        <div class="navigation-visibility">
            <div class="slide-icon active"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
          
        </div>
    </div>

    <div class="play-button">
        <button onclick="window.location.href='unit2'">Play</button>
      </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const nextBtn = document.querySelector(".next-btn");
            const prevBtn = document.querySelector(".prev-btn");
            const slides = document.querySelectorAll(".slide");
            const slideIcons = document.querySelectorAll(".slide-icon");
            let slideNumber = 0;

            const showSlide = (n) => {
                slides.forEach((slide) => {
                    slide.classList.remove("active");
                });
                slideIcons.forEach((icon) => {
                    icon.classList.remove("active");
                });

                if (n < 0) {
                    slideNumber = slides.length - 1;
                } else if (n >= slides.length) {
                    slideNumber = 0;
                } else {
                    slideNumber = n;
                }

                slides[slideNumber].classList.add("active");
                slideIcons[slideNumber].classList.add("active");
            };

            nextBtn.addEventListener("click", () => {
                showSlide(slideNumber + 1);
            });

            prevBtn.addEventListener("click", () => {
                showSlide(slideNumber - 1);
            });
        });
    </script>

</body>

</html>