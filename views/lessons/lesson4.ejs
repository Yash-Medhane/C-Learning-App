
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Operators and Operands in C Programming</title>
    <link rel="stylesheet" href="style/lesson1.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<body>
    <div class="slider">
        


        <div class="slide active">
            <img src="assets/lg.jpg" alt="">
            <div class="info">
                <h1>What are Operators and Operands?</h1>
                <p>In C programming, operators are symbols that perform operations on operands. Operands are the data or variables that operators act upon. For example, in the expression <code>a + b</code>, <code>+</code> is the operator, and <code>a</code> and <code>b</code> are operands.</p>
            </div>

        </div>

        <div class="slide">
            <img src="assets/or.jpg" alt="">
            <div class="info">
                <h1>Arithmetic Operators</h1>
        <p>Arithmetic operators perform arithmetic operations on operands. Examples include:</p>
        <ul>
            <li><strong>Addition (+):</strong> Adds two operands.</li>
            <p>Example: <code>int sum = a + b;</code></p>
            <li><strong>Subtraction (-):</strong> Subtracts the second operand from the first.</li>
            <p>Example: <code>int difference = a - b;</code></p>
            <li><strong>Multiplication (*):</strong> Multiplies two operands.</li>
            <p>Example: <code>int product = a * b;</code></p>
            <li><strong>Division (/):</strong> Divides the first operand by the second.</li>
            <p>Example: <code>float quotient = a / b;</code></p>
            <li><strong>Modulus (%):</strong> Computes the remainder of the division of the first operand by the second.</li>
            <p>Example: <code>int remainder = a % b;</code></p>
        </ul>

            </div>
        </div>

        <div class="slide">
            <img src="assets/1.jpg" alt="">
            <div class="info">
                <h1>Relational Operators</h1>
        <p>Relational operators compare the values of two operands. Examples include:</p>
        <ul>
            <li><strong>Equal to (==):</strong> Checks if two operands are equal.</li>
            <p>Example: <code>if (a == b)</code></p>
            <li><strong>Not equal to (!=):</strong> Checks if two operands are not equal.</li>
            <p>Example: <code>if (a != b)</code></p>
            <li><strong>Greater than (&gt;):</strong> Checks if the first operand is greater than the second.</li>
            <p>Example: <code>if (a &gt; b)</code></p>
            <li><strong>Less than (&lt;):</strong> Checks if the first operand is less than the second.</li>
            <p>Example: <code>if (a &lt; b)</code></p>
            <li><strong>Greater than or equal to (&gt;=):</strong> Checks if the first operand is greater than or equal to the second.</li>
            <p>Example: <code>if (a &gt;= b)</code></p>
            <li><strong>Less than or equal to (&lt;=):</strong> Checks if the first operand is less than or equal to the second.</li>
            <p>Example: <code>if (a &lt;= b)</code></p>
        </ul>
            </div>
        </div>

        <div class="slide">
            <img src="assets/2.jpg" alt="">
            <div class="info">
                <h1>Logical Operators</h1>
        <p>Logical operators perform logical operations on operands. Examples include:</p>
        <ul>
            <li><strong>Logical AND (&&):</strong> Returns true if both operands are true.</li>
            <p>Example: <code>if (a &amp;&amp; b)</code></p>
            <li><strong>Logical OR (||):</strong> Returns true if either operand is true.</li>
            <p>Example: <code>if (a || b)</code></p>
            <li><strong>Logical NOT (!):</strong> Reverses the logical state of its operand.</li>
            <p>Example: <code>if (!a)</code></p>
        </ul>
            </div>
        </div>

        <div class="slide">
            <img src="assets/3.jpg" alt="">
            <div class="info">
                <h1>Assignment Operators</h1>
        <p>Assignment operators assign values to operands. Examples include:</p>
        <ul>
            <li><strong>Assignment (=):</strong> Assigns the value of the right operand to the left operand.</li>
            <p>Example: <code>a = b;</code></p>
            <li><strong>Compound assignment (e.g., +=, -=, *=):</strong> Performs an operation on the two operands and assigns the result to the left operand.</li>
            <p>Example: <code>a += b; // Equivalent to a = a + b;</code></p>
        </ul>
            </div>
        </div>

        <div class="slide">
            <img src="assets/1.jpg" alt="">
            <div class="info">
                <h1>Bitwise Operators</h1>
        <p>Bitwise operators perform bitwise operations on operands. Examples include:</p>
        <ul>
            <li><strong>Bitwise AND (&&):</strong> Performs a bitwise AND operation between the bits of the two operands.</li>
            <p>Example: <code>result = a &amp; b;</code></p>
            <li><strong>Bitwise OR (||):</strong> Performs a bitwise OR operation between the bits of the two operands.</li>
            <p>Example: <code>result = a | b;</code></p>
            <li><strong>Bitwise XOR (^):</strong> Performs a bitwise XOR (exclusive OR) operation between the bits of the two operands.</li>
            <p>Example: <code>result = a ^ b;</code></p>
            <li><strong>Bitwise NOT (~):</strong> Performs a bitwise NOT operation, which inverts the bits of its single operand.</li>
            <p>Example: <code>result = ~a;</code></p>
            <li><strong>Left shift (<<):</strong> Shifts the bits of the first operand to the left by the number of positions specified by the second operand.</li>
            <p>Example: <code>result = a << n;</code></p>
            <li><strong>Right shift (>>):</strong> Shifts the bits of the first operand to the right by the number of positions specified by the second operand.</li>
            <p>Example: <code>result = a >> n;</code></p>
        </ul>
            </div>
        </div>

        <div class="slide">
            <img src="assets/bp.jpg" alt="">
            <div class="info">
                <p><strong>Understanding operators and operands is crucial for writing efficient and effective C programs. Practice using different types of operators to manipulate data and control program flow!</strong></p>
            </div>
        </div>
        
        <div class="navigation">
            <i class="fas fa-chevron-left prev-btn"></i>
            <i class="fas fa-chevron-right next-btn"></i>
        </div>
        <div class="navigation-visibility">
            <div class="slide-icon active"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>
            <div class="slide-icon"></div>

        </div>
    </div>

    <div class="play-button">
        <button onclick="window.location.href='unit1'">Play</button>
      </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const nextBtn = document.querySelector(".next-btn");
            const prevBtn = document.querySelector(".prev-btn");
            const slides = document.querySelectorAll(".slide");
            const slideIcons = document.querySelectorAll(".slide-icon");
            let slideNumber = 0;

            const showSlide = (n) => {
                slides.forEach((slide) => {
                    slide.classList.remove("active");
                });
                slideIcons.forEach((icon) => {
                    icon.classList.remove("active");
                });

                if (n < 0) {
                    slideNumber = slides.length - 1;
                } else if (n >= slides.length) {
                    slideNumber = 0;
                } else {
                    slideNumber = n;
                }

                slides[slideNumber].classList.add("active");
                slideIcons[slideNumber].classList.add("active");
            };

            nextBtn.addEventListener("click", () => {
                showSlide(slideNumber + 1);
            });

            prevBtn.addEventListener("click", () => {
                showSlide(slideNumber - 1);
            });
        });
    </script>

</body>

</html>